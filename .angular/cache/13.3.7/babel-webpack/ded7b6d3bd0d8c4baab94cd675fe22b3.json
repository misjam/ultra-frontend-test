{"ast":null,"code":"import _asyncToGenerator from \"/Users/mirkomarkovic/Work/ultra-frontend-test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { inject, TestBed } from '@angular/core/testing';\nimport { SearchComponent } from './search.component';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { GiphyService } from 'src/app/services/giphy.service';\ndescribe('SearchComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [SearchComponent],\n      imports: [HttpClientTestingModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(SearchComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('Remove search param on removeQuery()', () => {\n    component.searchQueries = ['Dog', 'Cat', 'Mouse'];\n    component.removeQuery('Dog');\n    expect(component.searchQueries).toContain('Cat');\n    expect(component.searchQueries).toContain('Mouse');\n    expect(component.searchQueries).not.toContain('Dog');\n  });\n  it('Add search query on addSearchQuery()', inject([GiphyService], giphyService => {\n    component.searchQueries = ['Dog', 'Cat'];\n    component.searchCtrl.setValue('Mouse');\n    component.addSearchQuery();\n    expect(component.searchQueries).toContain('Cat');\n    expect(component.searchQueries).toContain('Mouse');\n    expect(component.searchQueries).toContain('Dog'); // searchData\n\n    spyOn(giphyService, 'init');\n    component.ngOnInit();\n    expect(giphyService.init).toHaveBeenCalled();\n  }));\n});","map":{"version":3,"sources":["/Users/mirkomarkovic/Work/ultra-frontend-test/src/app/page-content/search/search.component.spec.ts"],"names":["inject","TestBed","SearchComponent","HttpClientTestingModule","GiphyService","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","searchQueries","removeQuery","expect","toContain","not","giphyService","searchCtrl","setValue","addSearchQuery","spyOn","ngOnInit","init","toHaveBeenCalled"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,OAAjB,QAAgC,uBAAhC;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,uBAAT,QAAwC,8BAAxC;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACAC,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAC9B,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACAC,EAAAA,UAAU,iCAAC,aAAY;AACnB,UAAMP,OAAO,CAACQ,sBAAR,CAA+B;AACjCC,MAAAA,YAAY,EAAE,CAACR,eAAD,CADmB;AAEjCS,MAAAA,OAAO,EAAE,CAACR,uBAAD;AAFwB,KAA/B,EAIDS,iBAJC,EAAN;AAKH,GANS,EAAV;AAOAJ,EAAAA,UAAU,CAAC,MAAM;AACbD,IAAAA,OAAO,GAAGN,OAAO,CAACY,eAAR,CAAwBX,eAAxB,CAAV;AACAI,IAAAA,SAAS,GAAGC,OAAO,CAACO,iBAApB;AACAP,IAAAA,OAAO,CAACQ,aAAR;AACH,GAJS,CAAV;AAKAC,EAAAA,EAAE,CAAC,sCAAD,EAAyC,MAAM;AAC7CV,IAAAA,SAAS,CAACW,aAAV,GAA0B,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAA1B;AACAX,IAAAA,SAAS,CAACY,WAAV,CAAsB,KAAtB;AACAC,IAAAA,MAAM,CAACb,SAAS,CAACW,aAAX,CAAN,CAAgCG,SAAhC,CAA0C,KAA1C;AACAD,IAAAA,MAAM,CAACb,SAAS,CAACW,aAAX,CAAN,CAAgCG,SAAhC,CAA0C,OAA1C;AACAD,IAAAA,MAAM,CAACb,SAAS,CAACW,aAAX,CAAN,CAAgCI,GAAhC,CAAoCD,SAApC,CAA8C,KAA9C;AACH,GANC,CAAF;AAOAJ,EAAAA,EAAE,CAAC,sCAAD,EAAyChB,MAAM,CAAC,CAACI,YAAD,CAAD,EAAkBkB,YAAD,IAAkB;AAChFhB,IAAAA,SAAS,CAACW,aAAV,GAA0B,CAAC,KAAD,EAAQ,KAAR,CAA1B;AACAX,IAAAA,SAAS,CAACiB,UAAV,CAAqBC,QAArB,CAA8B,OAA9B;AACAlB,IAAAA,SAAS,CAACmB,cAAV;AACAN,IAAAA,MAAM,CAACb,SAAS,CAACW,aAAX,CAAN,CAAgCG,SAAhC,CAA0C,KAA1C;AACAD,IAAAA,MAAM,CAACb,SAAS,CAACW,aAAX,CAAN,CAAgCG,SAAhC,CAA0C,OAA1C;AACAD,IAAAA,MAAM,CAACb,SAAS,CAACW,aAAX,CAAN,CAAgCG,SAAhC,CAA0C,KAA1C,EANgF,CAOhF;;AACAM,IAAAA,KAAK,CAACJ,YAAD,EAAe,MAAf,CAAL;AACAhB,IAAAA,SAAS,CAACqB,QAAV;AACAR,IAAAA,MAAM,CAACG,YAAY,CAACM,IAAd,CAAN,CAA0BC,gBAA1B;AACH,GAXgD,CAA/C,CAAF;AAYH,CAlCO,CAAR","sourcesContent":["import { inject, TestBed } from '@angular/core/testing';\nimport { SearchComponent } from './search.component';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { GiphyService } from 'src/app/services/giphy.service';\ndescribe('SearchComponent', () => {\n    let component;\n    let fixture;\n    beforeEach(async () => {\n        await TestBed.configureTestingModule({\n            declarations: [SearchComponent],\n            imports: [HttpClientTestingModule]\n        })\n            .compileComponents();\n    });\n    beforeEach(() => {\n        fixture = TestBed.createComponent(SearchComponent);\n        component = fixture.componentInstance;\n        fixture.detectChanges();\n    });\n    it('Remove search param on removeQuery()', () => {\n        component.searchQueries = ['Dog', 'Cat', 'Mouse'];\n        component.removeQuery('Dog');\n        expect(component.searchQueries).toContain('Cat');\n        expect(component.searchQueries).toContain('Mouse');\n        expect(component.searchQueries).not.toContain('Dog');\n    });\n    it('Add search query on addSearchQuery()', inject([GiphyService], (giphyService) => {\n        component.searchQueries = ['Dog', 'Cat'];\n        component.searchCtrl.setValue('Mouse');\n        component.addSearchQuery();\n        expect(component.searchQueries).toContain('Cat');\n        expect(component.searchQueries).toContain('Mouse');\n        expect(component.searchQueries).toContain('Dog');\n        // searchData\n        spyOn(giphyService, 'init');\n        component.ngOnInit();\n        expect(giphyService.init).toHaveBeenCalled();\n    }));\n});\n"]},"metadata":{},"sourceType":"module"}